/**
 *auth:changchuan
 *qq:29995716
 *date: 2015-03-11
 *detail: 本地开发静态文件代理服务器，配置指定域名及本地目录，如果本地文件存在则访问本地的文件，否则访问线上文件
 */
var config = require('./conf.json');

var func = require('./func.js');
var nodeStatic = require('node-static').Server;
var request = require("request");
var dns = require("dns");
var http = require("http");

var servers = {};
for( var project in config.project)
{
    //servers[s] = new nodeStatic(serverConf[s]);

servers[project] = servers[project]  ||  {};

    for(var host in config.project[project]){
        servers[project][host] = new nodeStatic(config.project[project][host]);
    }
}
var httpServer = http.createServer(function(req, res) {
      req.addListener('end', function() {

        var user = func.getClientIp(req);
        var project = config.user[user]["currentProject"];
        var host = req.headers.host;


        fileServer = servers[project][host];

        if(!fileServer){
             dns.resolve4(req.headers.host,function(err,addresses){
                if(err){
                    res.writeHeader(200,'text/html');   
                    res.write(req.url);
                    res.end(err);
                    return;
                 }else{
                    var ip = addresses[0];
                    var p = 'http://'+ip+req.url;
                    req.headers['Host'] = req.headers.host;
                    request({
                        method:req.method,
                        url:p,
                        headers:req.headers
                    }).pipe(res);
                  } 
            });
             return ;
        }

        fileServer.serve(req, res, function(err, result) {
            if (err && (err.status === 404)) {
            //本地没有文件访问线上，透明server
            dns.resolve4(req.headers.host,function(err,addresses){
                if(err){
                    res.writeHeader(200,'text/html');   
                    res.write(req.url);
                    res.end(err);
                 }else{
                    var ip = addresses[0];
                    var p = 'http://'+ip+req.url;
                    req.headers['Host'] = req.headers.host;
                    request({
                        method:req.method,
                        url:p,
                        headers:req.headers
                    }).pipe(res);
                  } 
            });
            }
        });


    }).resume();
});

httpServer.listen(80);


